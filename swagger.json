{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Kidslike V2 API docs",
    "description": "API documentation for GoIT project 'Kidslike V2'. Backend github repository: https://github.com/DanTsvirkun/kidslike_v2-backend",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "kidslikev2.herokuapp.com",
  "basePath": "",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Child",
      "description": "Children endpoints"
    },
    {
      "name": "Habit",
      "description": "Habits endpoints"
    },
    {
      "name": "Task",
      "description": "Tasks endpoints"
    },
    {
      "name": "Gift",
      "description": "Gifts endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Registration's object",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Registration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/AfterRegistration"
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Authentication's object",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/AfterLogin"
            }
          },
          "403": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "parameters": [
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/refresh": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get new pair of tokens",
        "parameters": [
          {
            "name": "Request body",
            "description": "Request body with session's id",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RefreshTokens"
            }
          },
          {
            "name": "Refresh token",
            "description": "'refreshToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/AfterRefreshTokens"
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid refresh token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authentication",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/AfterLogin"
            }
          }
        }
      }
    },
    "/auth/facebook": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authentication",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/AfterLogin"
            }
          }
        }
      }
    },
    "/child": {
      "post": {
        "tags": ["Child"],
        "summary": "Add a child",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Child's object",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Child" }
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/NewChild"
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/habit": {
      "get": {
        "tags": ["Habit"],
        "summary": "Get all children habits for current user",
        "parameters": [
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/GetHabits"
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/habit/{childId}": {
      "post": {
        "tags": ["Habit"],
        "summary": "Add habit for the child",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Habit's object",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Habit" }
          },
          {
            "name": "Child's id",
            "in": "path",
            "description": "Id of the child you want to update ('id' field in child's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/NewHabit"
            }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/habit/{habitId}": {
      "patch": {
        "tags": ["Habit"],
        "summary": "Edit habit",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Request body. At least one field is required.",
            "required": true,
            "schema": { "$ref": "#/components/schemas/PatchHabit" }
          },
          {
            "name": "Habit's id",
            "in": "path",
            "description": "Habit's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/NewHabit" }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Habit not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Habit"],
        "summary": "Delete habit",
        "parameters": [
          {
            "name": "Habit's id",
            "in": "path",
            "description": "Habit's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Habit not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/habit/confirm/{habitId}": {
      "patch": {
        "tags": ["Habit"],
        "summary": "Set habit's current day status to confirmed",
        "parameters": [
          {
            "name": "Habit's id",
            "in": "path",
            "description": "Habit's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/HabitConfirmedDay"
            }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided / Today's day doesn't exist on provided habit",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "This day has already been confirmed",
            "content": {}
          },
          "404": {
            "description": "Child not found / Habit not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/habit/cancel/{habitId}": {
      "patch": {
        "tags": ["Habit"],
        "summary": "Set habit's current day to canceled (child did not fulfill his task)",
        "parameters": [
          {
            "name": "Habit's id",
            "in": "path",
            "description": "Habit's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/HabitDayCanceled"
            }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided / Today's day doesn't exist on provided habit",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "This day has already been canceled",
            "content": {}
          },
          "404": {
            "description": "Child not found / Habit not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task": {
      "get": {
        "tags": ["Task"],
        "summary": "Get all children tasks for current user",
        "parameters": [
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/GetTasks"
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task/{childId}": {
      "post": {
        "tags": ["Task"],
        "summary": "Add task for the child",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Task's object",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Task" }
          },
          {
            "name": "Child's id",
            "in": "path",
            "description": "Id of the child you want to update ('id' field in child's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/NewTask"
            }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task/{taskId}": {
      "patch": {
        "tags": ["Task"],
        "summary": "Edit task",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Request body. At least one field is required.",
            "required": true,
            "schema": { "$ref": "#/components/schemas/PatchTask" }
          },
          {
            "name": "Task's id",
            "in": "path",
            "description": "Task's id ('id' field in task's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/NewTask" }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Task not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Task"],
        "summary": "Delete task",
        "parameters": [
          {
            "name": "Task's id",
            "in": "path",
            "description": "Task's id ('id' field in task's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Task not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task/confirm/{taskId}": {
      "patch": {
        "tags": ["Task"],
        "summary": "Set task's status to confirmed",
        "parameters": [
          {
            "name": "Task's id",
            "in": "path",
            "description": "Task's id ('id' field in task's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/ConfirmTask" }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "Task is already confirmed",
            "content": {}
          },
          "404": {
            "description": "Child not found / Task not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task/cancel/{taskId}": {
      "patch": {
        "tags": ["Task"],
        "summary": "Set task's status to canceled",
        "parameters": [
          {
            "name": "Task's id",
            "in": "path",
            "description": "Task's id ('id' field in task's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/CancelTask" }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "Task is already canceled",
            "content": {}
          },
          "404": {
            "description": "Child not found / Task not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task/reset/{taskId}": {
      "patch": {
        "tags": ["Task"],
        "summary": "Reset task's status",
        "parameters": [
          {
            "name": "Task's id",
            "in": "path",
            "description": "Task's id ('id' field in task's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/ResetTask" }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "Task is already reset",
            "content": {}
          },
          "404": {
            "description": "Child not found / Task not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/task/finished/{childId}": {
      "get": {
        "tags": ["Task"],
        "summary": "Get finished tasks from one child",
        "parameters": [
          {
            "name": "Child's id",
            "in": "path",
            "description": "Child's id ('id' field in child's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/GetFinishedTasks" }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "No finished tasks found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/gift": {
      "get": {
        "tags": ["Gift"],
        "summary": "Get all children gifts for current user",
        "parameters": [
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/GetGifts"
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/gift/{childId}": {
      "post": {
        "tags": ["Gift"],
        "summary": "Add gift for the child",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Gift's object",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Gift" }
          },
          {
            "name": "Child's id",
            "in": "path",
            "description": "Id of the child you want to update ('id' field in child's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/NewGift"
            }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Invalid user / Invalid session",
            "content": {}
          },
          "415": {
            "description": "File isn't an image",
            "content": {}
          }
        }
      }
    },
    "/gift/{giftId}": {
      "patch": {
        "tags": ["Gift"],
        "summary": "Edit gift",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "description": "Request body. At least one field is required.",
            "required": true,
            "schema": { "$ref": "#/components/schemas/PatchGift" }
          },
          {
            "name": "Gift's id",
            "in": "path",
            "description": "Gift's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": { "$ref": "#/components/schemas/NewGift" }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Gift not found / Invalid user / Invalid session",
            "content": {}
          },
          "415": {
            "description": "File isn't an image",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Gift"],
        "summary": "Delete gift",
        "parameters": [
          {
            "name": "Gift's id",
            "in": "path",
            "description": "Gift's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Child not found / Gift not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/gift/buy/{giftId}": {
      "patch": {
        "tags": ["Gift"],
        "summary": "Buy gift for the child",
        "parameters": [
          {
            "name": "Gift's id",
            "in": "path",
            "description": "Gift's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/PurchasedGift"
            }
          },
          "400": {
            "description": "Bad request (invalid request body or id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "This gift has already been purchased",
            "content": {}
          },
          "404": {
            "description": "Child not found / Invalid user / Invalid session",
            "content": {}
          },
          "409": {
            "description": "Not enough rewards for gaining this gift",
            "content": {}
          }
        }
      }
    },
    "/gift/reset/{giftId}": {
      "patch": {
        "tags": ["Gift"],
        "summary": "Reset gift if it's purchased",
        "parameters": [
          {
            "name": "Gift's id",
            "in": "path",
            "description": "Gift's id ('id' field in habit's object)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Access token",
            "description": "'accessToken' field you get after authentication",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/components/schemas/NewGift"
            }
          },
          "400": {
            "description": "Bad request (invalid id) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "This gift has already been reset",
            "content": {}
          },
          "404": {
            "description": "Gift not found / Child not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/user": {
      "delete": {
        "tags": ["User"],
        "summary": "Clear all your info",
        "parameters": [
          {
            "name": "Request body",
            "description": "Request body with your email and password",
            "in": "body",
            "schema": {
              "$ref": "#/components/schemas/Login"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Child": {
        "required": ["name", "gender"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Child's name",
            "example": "Adam"
          },
          "gender": {
            "type": "string",
            "description": "Child's gender",
            "enum": ["male", "female"]
          }
        }
      },
      "NewChild": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "integer",
            "description": "Child's rewards"
          },
          "habits": {
            "type": "array",
            "description": "Child's habits",
            "items": {}
          },
          "tasks": {
            "type": "array",
            "description": "Child's tasks",
            "items": {}
          },
          "gifts": {
            "type": "array",
            "description": "Child's gifts",
            "items": {}
          },
          "name": {
            "type": "string",
            "description": "Child's name",
            "example": "Adam"
          },
          "gender": {
            "type": "string",
            "description": "Child's gender",
            "enum": ["male", "female"]
          },
          "id": {
            "type": "string",
            "description": "Child's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "Habit": {
        "required": ["name", "rewardPerDay"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Habit's name",
            "example": "Name of the habit"
          },
          "rewardPerDay": {
            "type": "integer",
            "minimum": 1,
            "description": "Habit's reward for a single day",
            "example": 1
          }
        }
      },
      "GetHabits": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "days": {
                "type": "array",
                "description": "Habit days",
                "items": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "string",
                      "description": "Day's date",
                      "example": "2020-12-31"
                    },
                    "isCompleted": {
                      "type": "string",
                      "description": "Day's status",
                      "enum": ["unknown", "confirmed", "canceled"]
                    }
                  }
                }
              },
              "name": {
                "type": "string",
                "description": "Habit's name",
                "example": "Name of the habit"
              },
              "rewardPerDay": {
                "type": "integer",
                "description": "Habit's reward for a single day",
                "example": 1
              },
              "childId": {
                "type": "string",
                "description": "Id of the child whose habit it is",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "string",
                "description": "Habit's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          }
        }
      },
      "NewHabit": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "description": "Habit days",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "description": "Day's date",
                  "example": "2020-12-31"
                },
                "isCompleted": {
                  "type": "string",
                  "description": "Day's status",
                  "enum": ["unknown", "confirmed", "canceled"]
                }
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Habit's name",
            "example": "Name of the habit"
          },
          "rewardPerDay": {
            "type": "integer",
            "description": "Habit's reward for a single day",
            "example": 1
          },
          "childId": {
            "type": "string",
            "description": "Id of the child whose habit it is",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Habit's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "PatchHabit": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Habit's name",
            "example": "Name of the habit"
          },
          "rewardPerDay": {
            "type": "integer",
            "minimum": 1,
            "description": "Habit's reward for a single day",
            "example": 1
          }
        }
      },
      "HabitConfirmedDay": {
        "type": "object",
        "properties": {
          "updatedHabit": {
            "type": "object",
            "description": "Updated habit",
            "properties": {
              "days": {
                "type": "array",
                "description": "Habit days",
                "items": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "string",
                      "description": "Day's date",
                      "example": "2020-12-31"
                    },
                    "isCompleted": {
                      "type": "string",
                      "description": "Habit's status",
                      "enum": ["confirmed"]
                    }
                  }
                }
              },
              "name": {
                "type": "string",
                "description": "Habit's name",
                "example": "Name of the habit"
              },
              "rewardPerDay": {
                "type": "integer",
                "description": "Habit's reward for a single day",
                "minimum": 1,
                "example": 1
              },
              "childId": {
                "type": "string",
                "description": "Id of the child whose habit it is",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "string",
                "description": "Habit's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          },
          "updatedRewards": {
            "type": "integer",
            "description": "Child's new rewards amount",
            "minimum": 1,
            "example": 1
          }
        }
      },
      "HabitDayCanceled": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "description": "Habit days",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "description": "Day's date",
                  "example": "2020-12-31"
                },
                "isCompleted": {
                  "type": "string",
                  "description": "Day's status",
                  "enum": ["canceled"]
                }
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Habit's name",
            "example": "Name of the habit"
          },
          "rewardPerDay": {
            "type": "integer",
            "description": "Habit's reward for a single day",
            "minimum": 1,
            "example": 1
          },
          "childId": {
            "type": "string",
            "description": "Id of the child whose habit it is",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Habit's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "Task": {
        "required": ["name", "reward"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Task's name",
            "example": "Name of the task"
          },
          "reward": {
            "type": "integer",
            "description": "Task's reward",
            "minimum": 1,
            "example": 1
          },
          "daysToComplete": {
            "type": "integer",
            "minimum": 1,
            "description": "Days for a task to be completed (optional)",
            "example": 1
          }
        }
      },
      "ConfirmTask": {
        "type": "object",
        "properties": {
          "updatedTask": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Task's name",
                "example": "Name of the task"
              },
              "reward": {
                "type": "string",
                "description": "Task's reward",
                "minimum": 1,
                "example": 1
              },
              "isCompleted": {
                "type": "string",
                "description": "Task's status",
                "enum": ["confirmed"]
              },
              "childId": {
                "type": "string",
                "description": "Id of the child whose task it is",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "string",
                "description": "Task's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          },
          "updatedRewards": {
            "type": "integer",
            "description": "Child's new rewards amount",
            "minimum": 1,
            "example": 1
          }
        }
      },
      "CancelTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Task's name",
            "example": "Name of the task"
          },
          "reward": {
            "type": "string",
            "description": "Task's reward",
            "minimum": 1,
            "example": 1
          },
          "isCompleted": {
            "type": "string",
            "description": "Task's status",
            "enum": ["canceled"]
          },
          "childId": {
            "type": "string",
            "description": "Id of the child whose task it is",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Task's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "ResetTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Task's name",
            "example": "Name of the task"
          },
          "reward": {
            "type": "string",
            "description": "Task's reward",
            "minimum": 1,
            "example": 1
          },
          "isCompleted": {
            "type": "string",
            "description": "Task's status",
            "enum": ["unknown"]
          },
          "childId": {
            "type": "string",
            "description": "Id of the child whose task it is",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Task's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "GetTasks": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Task's name",
                "example": "Name of the task"
              },
              "reward": {
                "type": "string",
                "description": "Task's reward",
                "minimum": 1,
                "example": 1
              },
              "isCompleted": {
                "type": "string",
                "description": "Task's status",
                "enum": ["unknown", "confirmed", "canceled"]
              },
              "daysToComplete": {
                "type": "integer",
                "description": "Amount of days to complete this task (optional)",
                "minimum": 1,
                "example": 1
              },
              "startDate": {
                "type": "string",
                "description": "Task's start date (if 'daysToComplete' field was provided)",
                "example": "2020-12-31"
              },
              "endDate": {
                "type": "string",
                "description": "Task's end date (if 'daysToComplete' field was provided)",
                "example": "2021-01-01"
              },
              "childId": {
                "type": "string",
                "description": "Id of the child whose task it is",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "string",
                "description": "Task's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          }
        }
      },
      "GetFinishedTasks": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Task's name",
              "example": "Name of the task"
            },
            "reward": {
              "type": "string",
              "description": "Task's reward",
              "minimum": 1,
              "example": 1
            },
            "isCompleted": {
              "type": "string",
              "description": "Task's status",
              "enum": ["unknown", "confirmed", "canceled"],
              "example": "confirmed"
            },
            "daysToComplete": {
              "type": "integer",
              "description": "Amount of days to complete this task (optional)",
              "minimum": 1,
              "example": 1
            },
            "startDate": {
              "type": "string",
              "description": "Task's start date (if 'daysToComplete' field was provided)",
              "example": "2020-12-31"
            },
            "endDate": {
              "type": "string",
              "description": "Task's end date (if 'daysToComplete' field was provided)",
              "example": "2021-01-01"
            },
            "childId": {
              "type": "string",
              "description": "Id of the child whose task it is",
              "example": "507f1f77bcf86cd799439011"
            },
            "id": {
              "type": "string",
              "description": "Task's id",
              "example": "507f1f77bcf86cd799439012"
            }
          }
        }
      },
      "NewTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Task's name",
            "example": "Name of the task"
          },
          "reward": {
            "type": "string",
            "description": "Task's reward",
            "minimum": 1,
            "example": 1
          },
          "isCompleted": {
            "type": "string",
            "description": "Task's status",
            "enum": ["unknown", "confirmed", "canceled"]
          },
          "daysToComplete": {
            "type": "integer",
            "description": "Amount of days to complete this task (optional)",
            "minimum": 1,
            "example": 1
          },
          "startDate": {
            "type": "string",
            "description": "Task's start date (if 'daysToComplete' field was provided)",
            "example": "2020-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "Task's end date (if 'daysToComplete' field was provided)",
            "example": "2021-01-01"
          },
          "childId": {
            "type": "string",
            "description": "Id of the child whose task it is",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Task's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "PatchTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Task's name",
            "example": "Name of the task"
          },
          "reward": {
            "type": "integer",
            "description": "Task's reward",
            "minimum": 1,
            "example": 1
          },
          "isCompleted": {
            "type": "string",
            "description": "Task's status",
            "enum": ["unknown", "confirmed", "canceled"]
          },
          "daysToComplete": {
            "type": "integer",
            "minimum": 1,
            "description": "Days for a task to be completed (optional)",
            "example": 1
          },
          "startDate": {
            "type": "string",
            "description": "Task's start date (appears if 'daysToComplete' field is passed)",
            "example": "2020-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "Task's end date (appears if 'daysToComplete' field is passed)",
            "example": "2021-01-01"
          },
          "childId": {
            "type": "string",
            "description": "Id of the child this task was created for",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Task's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "Gift": {
        "required": ["name", "price"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gift's name",
            "example": "Name of the gift"
          },
          "price": {
            "type": "integer",
            "description": "Gift's price",
            "minimum": 1,
            "example": 1
          },
          "file": {
            "type": "file",
            "description": "Gift's image ('file' field in multipart/form-data content-type, optional)"
          }
        }
      },
      "GetGifts": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Gift's name",
                "example": "Name of the gift"
              },
              "price": {
                "type": "integer",
                "description": "Gift's price",
                "minimum": 1,
                "example": 1
              },
              "isPurchased": {
                "type": "boolean",
                "description": "Gift's status"
              },
              "imageUrl": {
                "type": "string",
                "description": "Gift's image url (created if 'file' field was provided while adding new gift)"
              },
              "childId": {
                "type": "string",
                "description": "Id of the child this gift was created for",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "string",
                "description": "Gift's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          }
        }
      },
      "NewGift": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gift's name",
            "example": "Name of the gift"
          },
          "price": {
            "type": "integer",
            "description": "Gift's price",
            "minimum": 1,
            "example": 1
          },
          "isPurchased": {
            "type": "boolean",
            "description": "Gift's status",
            "example": false
          },
          "imageUrl": {
            "type": "string",
            "description": "Gift's image url (created if 'file' field was provided while adding new gift)"
          },
          "childId": {
            "type": "string",
            "description": "Id of the child this gift was created for",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "Gift's id",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "PatchGift": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gift's name",
            "example": "Name of the gift"
          },
          "price": {
            "type": "integer",
            "description": "Gift's price",
            "minimum": 1,
            "example": 1
          },
          "file": {
            "type": "file",
            "description": "Gift's image ('file' field in multipart/form-data content-type, optional)"
          }
        }
      },
      "PurchasedGift": {
        "type": "object",
        "properties": {
          "updatedRewards": {
            "type": "integer",
            "description": "Child's new rewards amount",
            "minimum": 1,
            "example": 1
          },
          "purchasedGift": {
            "type": "object",
            "description": "Obtained gift",
            "properties": {
              "name": {
                "type": "string",
                "description": "Gift's name",
                "example": "Name of the gift"
              },
              "price": {
                "type": "integer",
                "description": "Gift's price",
                "minimum": 1,
                "example": 1
              },
              "isPurchased": {
                "type": "boolean",
                "description": "Gift's status"
              },
              "imageUrl": {
                "type": "string",
                "description": "Gift's image url (created if 'file' field was provided while adding new gift)"
              },
              "childId": {
                "type": "string",
                "description": "Id of the child this gift was created for",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "string",
                "description": "Gift's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          }
        }
      },
      "Registration": {
        "required": ["email", "password", "username"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Adam"
          }
        }
      },
      "AfterRegistration": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Adam"
          },
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "Login": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "AfterLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Adam"
          },
          "accessToken": {
            "type": "string",
            "description": "Session's access token (needed for all requests)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "refreshToken": {
            "type": "string",
            "description": "Session's refresh token (needed for /auth/refresh)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXB"
          },
          "sid": {
            "type": "string",
            "description": "Session's id (needed for /auth/refresh)",
            "example": "507f1f77bcf86cd799439011"
          },
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439012"
          },
          "data": {
            "type": "object",
            "properties": {
              "children": {
                "type": "array",
                "description": "User's children",
                "items": {
                  "type": "object",
                  "properties": {
                    "rewards": {
                      "type": "integer",
                      "description": "Child's rewards"
                    },
                    "habits": {
                      "type": "array",
                      "description": "Child's habits",
                      "items": {
                        "type": "object",
                        "properties": {
                          "days": {
                            "type": "array",
                            "description": "Habit days",
                            "items": {
                              "type": "object",
                              "properties": {
                                "date": {
                                  "type": "string",
                                  "description": "Day's date",
                                  "example": "2020-12-31"
                                },
                                "isCompleted": {
                                  "type": "string",
                                  "description": "Day's status",
                                  "enum": ["unknown", "confirmed", "canceled"]
                                }
                              }
                            }
                          },
                          "_id": {
                            "type": "string",
                            "description": "Habit's id",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "name": {
                            "type": "string",
                            "description": "Habit's name",
                            "example": "Name of the habit"
                          },
                          "rewardPerDay": {
                            "type": "integer",
                            "description": "Habit's reward for a single day",
                            "minimum": 1,
                            "example": 1
                          },
                          "childId": {
                            "type": "string",
                            "description": "Id of the child whose habit it is",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "__v": {
                            "type": "integer",
                            "description": "MongoDB document service versionKey (ignore)"
                          }
                        }
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "description": "Child's tasks",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Task's id",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "name": {
                            "type": "string",
                            "description": "Task's name",
                            "example": "Name of the task"
                          },
                          "reward": {
                            "type": "string",
                            "description": "Task's reward",
                            "minimum": 1,
                            "example": 1
                          },
                          "isCompleted": {
                            "type": "string",
                            "description": "Task's status",
                            "enum": ["unknown", "confirmed", "canceled"]
                          },
                          "childId": {
                            "type": "string",
                            "description": "Id of the child whose task it is",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "__v": {
                            "type": "integer",
                            "description": "MongoDB document service versionKey (ignore)"
                          }
                        }
                      }
                    },
                    "gifts": {
                      "type": "array",
                      "description": "Child's gifts",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Gift's id",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "name": {
                            "type": "string",
                            "description": "Gift's name",
                            "example": "Name of the gift"
                          },
                          "price": {
                            "type": "integer",
                            "description": "Gift's price",
                            "minimum": 1,
                            "example": 1
                          },
                          "isPurchased": {
                            "type": "boolean",
                            "description": "Gift's status"
                          },
                          "imageUrl": {
                            "type": "string",
                            "description": "Gift's image url (created if 'file' field was provided while adding new gift)"
                          },
                          "childId": {
                            "type": "string",
                            "description": "Id of the child this gift was created for",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "__v": {
                            "type": "integer",
                            "description": "MongoDB document service versionKey (ignore)"
                          }
                        }
                      }
                    },
                    "_id": {
                      "type": "string",
                      "description": "Child's id",
                      "example": "507f1f77bcf86cd799439011"
                    },
                    "name": {
                      "type": "string",
                      "description": "Child's name",
                      "example": "Adam"
                    },
                    "gender": {
                      "type": "string",
                      "description": "Child's gender",
                      "enum": ["male", "female"]
                    },
                    "__v": {
                      "type": "integer",
                      "description": "MongoDB document service versionKey (ignore)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RefreshTokens": {
        "type": "object",
        "properties": {
          "sid": {
            "type": "string",
            "description": "Session's ('sid' field after authentication)",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "AfterRefreshTokens": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXB"
          },
          "sid": {
            "type": "string",
            "description": "New session's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      }
    }
  }
}
